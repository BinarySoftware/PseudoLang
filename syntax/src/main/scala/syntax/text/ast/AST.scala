package org.enso.syntax.text.ast

import org.enso.data.ADT
import org.enso.data.List1
import org.enso.syntax.text.ast.Repr.R

sealed trait Symbol extends Repr.Provider {
  def show() = repr.build()
}

////////////////////////////////////////////////////////////////////////////////
//// AST ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

final case class AST(elems: List[AST.Elem]) extends Symbol {
  val repr: Repr.Builder = R + elems
}

object AST {

  sealed trait Elem extends Symbol
  object Elem {
    sealed trait Invalid extends Elem

    case object Newline extends Elem {
      val repr: Repr.Builder = R + "\n"
    }
  }

  case class Undefined(str: String) extends Elem {
    val repr: Repr.Builder = R + str
  }
  object Undefined {
  }

  //////////////////////////////////////////////////////////////////////////////
  //// Operator ////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////
  case class Oper(){

  }
  object Oper {

  }

  //////////////////////////////////////////////////////////////////////////////
  //// Variable ////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////
  case class Var() {

  }
  object Var {

  }

  //////////////////////////////////////////////////////////////////////////////
  //// Function ////////////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////////////////////////
  case class Func(name: String, args:List[AST], body: Option[AST]) {

  }
  object Func {

  }


}
